@use "sass:math";
@use "sass:list";
@use "variables" as *;
@use "functions" as *;

@mixin adaptiveValue(
  $property,
  $maxSize: 0.000001,
  $minSize: 0.000001,
  $widthFrom: $max-width-page,
  $widthTo: $min-width-page
) {
  $addSize: toRem($maxSize - $minSize);

  $slope: math.div(($maxSize - $minSize), ($widthFrom - $widthTo));
  $yIntersection: -$widthTo * $slope + $minSize;

  @if ($yIntersection == 0) {
    $yIntersection: 0.000001;
  }

  $flyValue: #{toRem($yIntersection)} " + " #{$slope * 100}vw;

  $propertyValue: #{"clamp(" #{toRem($minSize)} "," $flyValue "," #{toRem($maxSize)} ")"};

  @if ($minSize > $maxSize) {
    $propertyValue: #{"clamp(" #{toRem($maxSize)} "," $flyValue "," #{toRem($minSize)} ")"};
  }

  @media (width >= #{$widthFrom}px) {
    #{$property}: toRem($maxSize);
  }

  @media (width >= #{$widthTo}px) and (width < #{$widthFrom}px) {
    #{$property}: $propertyValue;
  }
}

@mixin hover($hasActiveEffectOnMobile: true) {
  @media (any-hover: hover) {
    &:hover,
    &:focus {
      @content;
    }
    &:active {
      opacity: 0.8;
    }
  }
  @media (any-hover: none) {
    @if $hasActiveEffectOnMobile {
      &:active {
        @content;
      }
    }
  }
}

// @mixin hover(
//   $properties,
//   $values,
//   $duration: 250ms,
//   $timing-function: ease,
//   $delay: 0s,
//   $nested-selector: "&"
// ) {
//   $property-string: "opacity";
//   @each $property in $properties {
//     $property-string: #{$property-string} + ", " + #{$property};
//   }
//   #{$nested-selector} {
//     transition: $duration $timing-function $delay;
//     transition-property: $property-string;
//     @content;
//   }
//   @media (hover: hover) {
//     &:hover,
//     &:focus {
//       #{$nested-selector} {
//         @for $i from 1 through list.length($properties) {
//           #{list.nth($properties, $i)}: list.nth($values, $i);
//         }
//       }
//     }
//     &:active {
//       opacity: 0.8;
//     }
//   }
//   @media (hover: none) {
//     &:active {
//       #{$nested-selector} {
//         @for $i from 1 through list.length($properties) {
//           #{list.nth($properties, $i)}: list.nth($values, $i);
//         }
//       }
//     }
//   }
// }
@mixin mobile {
  @media (width >= toRem($bp-mobile)) {
    @content;
  }
}

@mixin tablet {
  @media (width >= toRem($bp-tablet)) {
    @content;
  }
}

@mixin desktop {
  @media (width >= toRem($bp-desktop)) {
    @content;
  }
}

@mixin max-mobile {
  @media (width < toRem($bp-mobile)) {
    @content;
  }
}

@mixin max-tablet {
  @media (width < toRem($bp-tablet)) {
    @content;
  }
}

@mixin max-desktop {
  @media (width < toRem($bp-desktop)) {
    @content;
  }
}

@mixin backdrop($visible-class: ".is-visible") {
  // &::before {
  //   content: "";
  //   position: fixed;
  //   inset: 0;
  //   background-color: $backdrop-color;
  //   opacity: 0;
  //   pointer-events: none;
  //   z-index: 888;
  //   transition: opacity 200ms ease-out;
  // }
  // &#{$visible-class},
  // &:has(#{$visible-class}) {
  //   &::before {
  //     opacity: 1;
  //   }
  // }
  :has(&#{$visible-class}) body::after {
    opacity: 1;
  }
}
