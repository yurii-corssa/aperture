@use "sass:math";
@use "sass:list";
@use "variables" as *;
@use "functions" as *;

@mixin adaptiveValue(
  $property,
  $maxSize: 0.000001,
  $minSize: 0.000001,
  $widthFrom: $max-width-page,
  $widthTo: $min-width-page
) {
  $addSize: toRem($maxSize - $minSize);

  $slope: math.div(($maxSize - $minSize), ($widthFrom - $widthTo));
  $yIntersection: -$widthTo * $slope + $minSize;

  @if ($yIntersection == 0) {
    $yIntersection: 0.000001;
  }

  $flyValue: #{toRem($yIntersection)} " + " #{$slope * 100}vw;

  $propertyValue: #{"clamp(" #{toRem($minSize)} "," $flyValue "," #{toRem($maxSize)} ")"};

  @if ($minSize > $maxSize) {
    $propertyValue: #{"clamp(" #{toRem($maxSize)} "," $flyValue "," #{toRem($minSize)} ")"};
  }

  @media (width >= #{$widthFrom}px) {
    #{$property}: toRem($maxSize);
  }

  @media (width >= #{$widthTo}px) and (width < #{$widthFrom}px) {
    #{$property}: $propertyValue;
  }
}

@mixin hover($hasActiveEffectOnMobile: true) {
  @media (any-hover: hover) {
    &:hover,
    &:focus {
      @content;
    }
    &:active {
      opacity: 0.8;
    }
  }
  @media (any-hover: none) {
    @if $hasActiveEffectOnMobile {
      &:active {
        @content;
      }
    }
  }
}

@mixin noise() {
  overflow: hidden;

  &::after {
    content: "";
    position: absolute;
    top: -10rem;
    left: -10rem;
    width: calc(100% + 20rem);
    height: calc(100% + 20rem);
    z-index: 1;
    pointer-events: none;
    background-image: url(../img/textures/noise.png);
    animation: noise 1500ms steps(2) infinite;
  }
}

@keyframes noise {
  0% {
    transform: translate3d(0, 9rem, 0);
  }
  10% {
    transform: translate3d(-1rem, -4rem, 0);
  }
  20% {
    transform: translate3d(-8rem, 2rem, 0);
  }
  30% {
    transform: translate3d(9rem, -9rem, 0);
  }
  40% {
    transform: translate3d(-2rem, 7rem, 0);
  }
  50% {
    transform: translate3d(-9rem, -4rem, 0);
  }
  60% {
    transform: translate3d(2rem, 6rem, 0);
  }
  70% {
    transform: translate3d(7rem, -8rem, 0);
  }
  80% {
    transform: translate3d(-9rem, 1rem, 0);
  }
  90% {
    transform: translate3d(6rem, -5rem, 0);
  }
  to {
    transform: translate3d(-7rem, 0, 0);
  }
}

@mixin mobile {
  @media (width >= toRem($bp-mobile)) {
    @content;
  }
}

@mixin tablet {
  @media (width >= toRem($bp-tablet)) {
    @content;
  }
}

@mixin desktop {
  @media (width >= toRem($bp-desktop)) {
    @content;
  }
}

@mixin max-mobile {
  @media (width < toRem($bp-mobile)) {
    @content;
  }
}

@mixin max-tablet {
  @media (width < toRem($bp-tablet)) {
    @content;
  }
}

@mixin max-desktop {
  @media (width < toRem($bp-desktop)) {
    @content;
  }
}

@mixin backdrop($visibleClass: ".is-visible", $zIndex: 888) {
  :has(&#{$visibleClass}) body::after {
    opacity: 1;
    z-index: $zIndex;
  }
}
